// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  gender    String
  age       Int

  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allergies UserAlergy[]
  clinicalIllness UserClinicalIllness[]
  preferences UserPreferences[]
  products UserProduct[]
}

model Product {
  id        String      @id @default(uuid())
  name      String

  form      Form     @relation(fields: [formId], references: [id])
  formId    String

  sideEffects String
  storage   String
  dosage    String
  ingredients String[]
  contradictions String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String

  users     UserProduct[]
  pharmacies ProductPharmacy[]
}

model Form {
  id        String      @id @default(uuid())
  form      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Category {
  id        String      @id @default(uuid())
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Pharmacy {
  id        String      @id @default(uuid())
  name      String
  address   String
  openTime  String
  closeTime String
  latitude Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsPharmacy ProductPharmacy[]
}

model UserPreferences {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  dosage    String
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allergy {
  id        String      @id @default(uuid())
  name   String
  information String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserAlergy[]
}

model ClinicalIllness{
  id        String      @id @default(uuid())
  name String
  information String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserClinicalIllness[]
}


model UserAlergy{
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  allergy   Allergy  @relation(fields: [allergyId], references: [id])
  allergyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserClinicalIllness{
  id        String      @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId    String
  clinicalIllness   ClinicalIllness  @relation(fields: [clinicalIllnessId], references: [id])
  clinicalIllnessId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProduct {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductPharmacy {
  id        String      @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  pharmacy  Pharmacy @relation(fields: [pharmacyId], references: [id])
  pharmacyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  gender    String
  age       Int

  status    Status   @relation(fields: [statusId], references: [id])
  statusId  Int

  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allergies UserAlergy[]
  clynicalIlnesses UserClynicalIlness[]
  preferences UserPreferences[]
  products UserProduct[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String

  form      Form     @relation(fields: [formId], references: [id])
  formId    Int

  sideEffects String
  storage   String
  dosage    String
  ingredients String[]
  contradictions String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  users     UserProduct[]
  pharmacies ProductPharmacy[]
}

model Form {
  id        Int      @id @default(autoincrement())
  form      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Category {
  id        Int      @id @default(autoincrement())
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Pharmacy {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  openTime  String
  closeTime String
  latitude Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsPharmacy ProductPharmacy[]
}

model UserPreferences {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  dosage    String
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id        Int      @id @default(autoincrement())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Allergy {
  id        Int      @id @default(autoincrement())
  name   String
  information String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserAlergy[]
}

model ClynicalIlness{
  id        Int      @id @default(autoincrement())
  name String
  information String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserClynicalIlness[]
}


model UserAlergy{
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [UserId], references: [id])
  UserId    Int
  allergy   Allergy  @relation(fields: [AllergyId], references: [id])
  AllergyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserClynicalIlness{
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [UserId], references: [id])
  UserId    Int
  clynicalIlness   ClynicalIlness  @relation(fields: [ClynicalIlnessId], references: [id])
  ClynicalIlnessId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProduct {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [UserId], references: [id])
  UserId    Int
  product   Product  @relation(fields: [ProductId], references: [id])
  ProductId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductPharmacy {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [ProductId], references: [id])
  ProductId Int
  pharmacy  Pharmacy @relation(fields: [PharmacyId], references: [id])
  PharmacyId Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user/admin
enum Role{
  USER
  ADMIN
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  gender    String?
  age       Int?
  imgUrl    String?
  payed     Boolean   @default(false)

  email     String   @unique
  password  String

  role      Role     @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allergies UserCondition[]
  preferences UserPreferences[]
  products UserProduct[]
  medicine userUsedMedicine[]
}

model Product {
  id        String      @id @default(uuid())
  name      String

  form      Form     @relation(fields: [formId], references: [id])
  formId    String
  
  imgUrl    String?
  barcode   String
  sideEffects String
  storage   String
  dosage    String
  ingredients String[]
  contradictions String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String

  pharmacies ProductPharmacy[]
}

model Form {
  id        String      @id @default(uuid())
  form      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Category {
  id        String      @id @default(uuid())
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
}

model Pharmacy {
  id        String      @id @default(uuid())
  name      String
  openTime  String
  closeTime String
  latitude Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsPharmacy ProductPharmacy[]
}

model UserPreferences {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  preferences String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Condition {
  id        String      @id @default(uuid())
  alergies   String @default("Няма извести алергии")
  chronicDiseases String @default("Няма извести хронични заболявания")
  diseases String @default("Няма извести заболявания")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserCondition[]
}

model UserCondition{
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  condition   Condition  @relation(fields: [conditionId], references: [id])
  conditionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProduct {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name     String
  facts String[]
  advice String[]
  status String
  expert String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductPharmacy {
  id        String      @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  pharmacy  Pharmacy @relation(fields: [pharmacyId], references: [id])
  pharmacyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userUsedMedicine{
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  medicine String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}